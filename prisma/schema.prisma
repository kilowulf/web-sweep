// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Generator configuration for Prisma Client
generator client {
  provider = "prisma-client-js"
}

// Data source configuration using SQLite; DATABASE_URL is read from environment variables.
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


 
  
// The WorkFlow model represents a user-defined workflow.
model WorkFlow {
  id            String               @id @default(cuid())
  userId        String
  name          String
  description   String?
  definition    String
  executionPlan String?
  creditsCost   Int                  @default(0)
  cron          String?
  status        String               // e.g., DRAFT, PUBLISHED
  lastRunAt     DateTime?
  lastRunId     String?
  lastRunStatus String?
  nextRunAt     DateTime?
  createdAt     DateTime             @default(now())
  updateAt      DateTime             @updatedAt

  executions    WorkflowExecution[]

  @@unique([name, userId])
}


//  The WorkflowExecution model represents an instance of a workflow run.  

model WorkflowExecution {
  id               String              @id @default(cuid())
  workflowId       String
  userId           String
  trigger          String
  status           String
  createdAt        DateTime            @default(now())
  startedAt        DateTime?
  completedAt      DateTime?
  definition       String              @default("{}")
  creditsConsumed  Int                 @default(0)

  phases           ExecutionPhase[]

  // Relation to the parent WorkFlow. Cascading delete ensures execution is removed if the workflow is deleted.
  workflow         WorkFlow            @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}


// The ExecutionPhase model represents a single phase or step within a workflow execution. 

model ExecutionPhase {
  id                String            @id @default(cuid())
  userId            String 
  status            String 
  number            Int 
  node              String 
  name              String
  startedAt         DateTime?
  completedAt       DateTime?
  inputs            String?
  outputs           String? 
  creditsConsumed   Int?

  workflowExecutionId String 
  execution         WorkflowExecution  @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)

  logs              ExecutionLog[]
}


// The ExecutionLog model stores log messages generated during the execution of a phase.

model ExecutionLog {
  id                String           @id @default(cuid())
  logLevel          String  
  message           String
  timestamp         DateTime         @default(now())

  executionPhaseId  String
  executionPhase    ExecutionPhase   @relation(fields: [executionPhaseId], references: [id], onDelete: Cascade)
}


//  The UserBalance model tracks the available credits for each user.
  

model UserBalance {
  userId  String @id
  credits Int    @default(0)
}


//  The Credential model represents authentication credentials stored for a user. 
  

model Credential {
  id        String   @id @default(cuid())
  userId    String
  name      String
  value     String
  createdAt DateTime @default(now())

  @@unique([userId, name])
}


//  The UserPurchase model logs purchases made by users.  

model UserPurchase {
  id          String   @id @default(cuid())
  userId      String
  stripeId    String
  description String
  amount      Int
  currency    String
  date        DateTime @default(now())
}
